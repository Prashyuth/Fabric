# Fabric notebook source

# METADATA ********************

# META {
# META   "kernel_info": {
# META     "name": "synapse_pyspark"
# META   },
# META   "dependencies": {
# META     "lakehouse": {
# META       "default_lakehouse": "ebc3763c-04cd-44ec-b374-b18a66e21391",
# META       "default_lakehouse_name": "Bronze",
# META       "default_lakehouse_workspace_id": "bd9b2ab8-d282-4054-905e-a13e85d43ac6",
# META       "known_lakehouses": [
# META         {
# META           "id": "ebc3763c-04cd-44ec-b374-b18a66e21391"
# META         }
# META       ]
# META     }
# META   }
# META }

# CELL ********************

# Welcome to your new notebook
# Type here in the cell editor to add code!
import pandas as pd
df= pd.read_csv("abfss://bd9b2ab8-d282-4054-905e-a13e85d43ac6@onelake.dfs.fabric.microsoft.com/ebc3763c-04cd-44ec-b374-b18a66e21391/Files/Retail1.csv")

# METADATA ********************

# META {
# META   "language": "python",
# META   "language_group": "synapse_pyspark"
# META }

# CELL ********************

# Code generated by Data Wrangler for pandas DataFrame

def clean_data(df):
    # Filter rows based on column: 'ItemID'
    df = df[(df['ItemID'] > 9) & (df['ItemID'].apply(str).str.contains("", regex=False, na=False, case=False))]
    # Performed 1 aggregation grouped on column: 'ItemID'
    df = df.groupby(['ItemID']).agg(Qty_sum=('Qty', 'sum')).reset_index()
    return df

df_clean = clean_data(df.copy())
display(df_clean)

# METADATA ********************

# META {
# META   "language": "python",
# META   "language_group": "synapse_pyspark"
# META }

# CELL ********************

df1=spark.createDataFrame(df_clean)
df1.write.format("delta").mode("append").save("abfss://bd9b2ab8-d282-4054-905e-a13e85d43ac6@onelake.dfs.fabric.microsoft.com/ebc3763c-04cd-44ec-b374-b18a66e21391/Tables/reatilaggregate")

# METADATA ********************

# META {
# META   "language": "python",
# META   "language_group": "synapse_pyspark"
# META }
